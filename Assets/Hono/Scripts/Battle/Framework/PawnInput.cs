//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Resources/Pawn.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Hono.Scripts.Battle
{
    public partial class @PawnInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PawnInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Pawn"",
    ""maps"": [
        {
            ""name"": ""Pawn"",
            ""id"": ""df2db23f-9d94-4960-bfb6-e0facbeb7685"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""95c04747-b845-4e18-9293-215f56918b87"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""35351150-ba0e-4973-b7db-846003ce54ae"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""844cb135-703a-416d-ac3a-07685e7b305d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8b822627-3a74-4e6e-a205-00dc43d0ae8a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""02f180f6-2a9a-4e70-9c38-b896819b81bf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1ccea12f-557e-48e5-9665-bea9d9ac1d21"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Pawn
            m_Pawn = asset.FindActionMap("Pawn", throwIfNotFound: true);
            m_Pawn_Move = m_Pawn.FindAction("Move", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Pawn
        private readonly InputActionMap m_Pawn;
        private List<IPawnActions> m_PawnActionsCallbackInterfaces = new List<IPawnActions>();
        private readonly InputAction m_Pawn_Move;
        public struct PawnActions
        {
            private @PawnInput m_Wrapper;
            public PawnActions(@PawnInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Pawn_Move;
            public InputActionMap Get() { return m_Wrapper.m_Pawn; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PawnActions set) { return set.Get(); }
            public void AddCallbacks(IPawnActions instance)
            {
                if (instance == null || m_Wrapper.m_PawnActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PawnActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }

            private void UnregisterCallbacks(IPawnActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
            }

            public void RemoveCallbacks(IPawnActions instance)
            {
                if (m_Wrapper.m_PawnActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPawnActions instance)
            {
                foreach (var item in m_Wrapper.m_PawnActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PawnActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PawnActions @Pawn => new PawnActions(this);
        public interface IPawnActions
        {
            void OnMove(InputAction.CallbackContext context);
        }
    }
}
